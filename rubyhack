#!/usr/bin/env ruby

require 'bundler/setup'

require 'colorized_string'
require 'rgl/adjacency'
require 'rgl/dot'

module Tag
  # Used for the world
  CONNECTION = :connection # Entity for where node and edge meet.
  WORLD = 'World'
  WALL = :wall

  # Other
  MONSTER = :monster
  PLAYER = :player
end

SAVEFILE = 'savefile'

require 'recs'

require 'require_all'
require_all './**/*.rb'

if File.exist? SAVEFILE
  em = Marshal.load File.read SAVEFILE
else
  em = Recs::EntityManager.new

  # Seems weird for these to be entities. Not sure how else to do it for now.
  em.add_component em.create_basic_entity, PlayerInput.new('h', PlayerInputSystem::DoLeft)
  em.add_component em.create_basic_entity, PlayerInput.new('l', PlayerInputSystem::DoRight)
  em.add_component em.create_basic_entity, PlayerInput.new('k', PlayerInputSystem::DoUp)
  em.add_component em.create_basic_entity, PlayerInput.new('j', PlayerInputSystem::DoDown)
  em.add_component em.create_basic_entity, PlayerInput.new('y', PlayerInputSystem::DoUpLeft)
  em.add_component em.create_basic_entity, PlayerInput.new('u', PlayerInputSystem::DoUpRight)
  em.add_component em.create_basic_entity, PlayerInput.new('b', PlayerInputSystem::DoDownLeft)
  em.add_component em.create_basic_entity, PlayerInput.new('n', PlayerInputSystem::DoDownRight)

  em.add_component em.create_basic_entity, PlayerInput.new('d', PlayerInputSystem::DumpDetails)
  em.add_component em.create_basic_entity, PlayerInput.new('S', PlayerInputSystem::SaveAndQuit)

  world_entity = em.create_tagged_entity Tag::WORLD
  world = World.new [{
    source: :level_1,
    target: :level_2,
    source_i: 3,
    source_j: 3,
    target_i: 12,
    target_j: 4
  },{
    source: :level_2,
    target: :level_3,
    source_i: 7,
    source_j: 20,
    target_i: 3,
    target_j: 3
  },{
    source: :level_3,
    target: :level_1,
    source_i: 2,
    source_j: 15,
    target_i: 10,
    target_j: 34
  }], :level_1
  em.add_component world_entity, world

  monster_entity = em.create_tagged_entity Tag::MONSTER
  em.add_component monster_entity, Health.new(3)
  monster_position = Position.new(3, 10, world.current_node_id, blocks: true)
  em.add_component monster_entity, monster_position
  # TODO As a general rule, I think I want to keep specific configuration
  # things out of the em. Instead of passing a green g and z-index of 1 to
  # Renderable, should it just have a key to a thing that fetches those values?
  #
  # Then those values could be changed and even if there were a previous
  # savefile, the game that spins up would have the new rendering.
  #
  # ^ Also includes keybindings (PlayerInput component shouldn't exist).
  em.add_component monster_entity, Renderable.new(ColorizedString['g'].colorize(:green), z: 1)

  monster_entity = em.create_tagged_entity Tag::MONSTER
  em.add_component monster_entity, Health.new(3)
  monster_position = Position.new(2, 9, world.current_node_id, blocks: true)
  em.add_component monster_entity, monster_position
  em.add_component monster_entity, Renderable.new(ColorizedString['g'].colorize(:green), z: 1)

  player_entity = em.create_tagged_entity Tag::PLAYER
  em.add_component player_entity, Health.new(10)
  player_position = Position.new(1, 1, world.current_node_id, blocks: true)
  em.add_component player_entity, player_position
  em.add_component player_entity, Renderable.new('@', z: 1)
end

Game.new em
